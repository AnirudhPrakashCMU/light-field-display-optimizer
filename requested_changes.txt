REQUESTED CHANGES TO LIGHT FIELD DISPLAY OPTIMIZER
==================================================

1. FINITE APERTURE EYE LENS MODIFICATION
-----------------------------------------
Current Implementation:
- All rays pass through a single point on the eye lens (pinhole model)
- Eye lens refraction occurs at one precise location

Requested Changes:
- Implement finite aperture eye lens (4mm diameter recommended)
- In each optimization step, randomly sample a point on the lens aperture
- Assume thin lens model (aperture is a plane)
- All rays from the imaging plane (retina) pass through that randomly sampled point
- Apply refraction calculations at the sampled lens position
- This creates more realistic optical behavior with varying ray paths

Technical Implementation Notes:
- Sample random (x,y) coordinates within 4mm diameter circle on lens plane
- Use this sampled point as the lens intersection for ALL rays in that iteration
- Maintain lens power calculations but apply at the sampled position
- This will introduce realistic optical variations across optimization steps

2. HIGH FREQUENCY TEXTURE ADDITION
-----------------------------------
Current Implementation:
- Scenes use solid colored spheres and basic geometric shapes
- Limited high-frequency content in scene objects

Requested Changes:
- Add high frequency texture to scene objects
- Specifically for circular/spherical objects:
  * Add grainy texture patterns
  * Include text overlays on surfaces
  * Create detailed surface patterns with high spatial frequency content
- This will test the optimizer's ability to reproduce fine details
- ADDITIONAL: Add ground truth scene output with normal eye lens parameters
  * Generate reference images using standard eye lens settings
  * This provides baseline comparison for finite aperture modifications

Suggested Texture Options:
- Procedural noise patterns on sphere surfaces
- Text rendering (letters, numbers) mapped to sphere surfaces
- Checkerboard or grid patterns at fine scales
- Random speckle patterns
- Combination of multiple texture types

Output Requirements:
- Generate textured scene with finite aperture eye lens (main optimization)
- Generate same textured scene with normal/standard eye lens (ground truth reference)

3. COMPETITOR SYSTEM IMPLEMENTATION
------------------------------------
Current Implementation:
- Single optimizer system with 8 display planes at fixed focal lengths (10-100mm)
- All displays optimized simultaneously to reproduce target scenes

Requested Competitor System:
- Full inverse rendering approach (NO OPTIMIZATION)
- Direct analytical solution for each depth layer
- For each object at specific depth (e.g., 1m, 2m, 3m):
  * Adjust tunable focal length to EXACTLY match object depth
  * Use inverse ray tracing from eye through optical system to display
  * Analytically compute what each display pixel should show to render texture at that depth
- This is a direct mapping approach using inverse rendering equations

Competitor System Specifications:
- Identify all unique depths in the scene (e.g., 1m, 2m, 3m objects)
- For each depth level:
  * Set tunable focal length = object depth exactly
  * Inverse ray trace from eye → tunable lens → microlens → display
  * For each display pixel, compute what color/texture it should show
  * Directly set display pixel values (no gradient descent optimization)
- Each display shows only objects at depths that correspond to its focal length setting
- Use full optical system ray tracing but in INVERSE direction

Technical Implementation:
- Ray trace backwards: eye → optical system → display pixel
- For each ray, determine which scene object it intersects at the target depth
- Set display pixel to the texture/color of that object
- No iterative optimization - direct analytical computation
- Multiple displays can show same object if depths align with focal lengths

Key Differences from Current System:
- NO optimization loop or gradient descent
- Direct inverse rendering computation
- Focal length exactly matches object depth (not approximation)
- Analytical solution rather than learned solution

IMPLEMENTATION PRIORITY
-----------------------
1. Finite aperture eye lens (most important for realism)
2. High frequency texture (important for testing detail reproduction)
3. Competitor system (important for performance evaluation)

QUESTIONS FOR CLARIFICATION
---------------------------
- Should the random lens sampling occur once per optimization iteration or once per pixel?
- What type of high frequency texture is preferred (procedural vs image-based)?
- For competitor system: Should each display plane correspond to one specific depth, or can multiple objects at same depth appear on same display?
- Should the competitor system handle overlapping objects at same depth, or render them separately?
- What output format is preferred for comparison (same debug outputs as main system)?